// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UtilityTools.Data;

namespace UtilityTools.Data.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20240104083009_addpathanddate")]
    partial class addpathanddate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("UtilityTools.Data.Domain.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NovelName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.BookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.BookCategoryRelation", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategoryRelation");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.BookHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastReadTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PageIndex")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Position")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("BookForeignKey");

                    b.ToTable("BookHistory");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.BookMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookForeignKey")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PageIndex")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Position")
                        .HasColumnType("REAL");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookForeignKey");

                    b.ToTable("BookMark");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.MediaHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MediaHistory");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.MediaKeyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Keyword")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Star")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MediaKeyword");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.MediaSymbol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoragePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MediaSymbol");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.PngCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PngCategory");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.PngImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PngImage");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.PngImageCategoryRelation", b =>
                {
                    b.Property<int>("PngImageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PngImageId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("PngImageCategoryRelation");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.ResourceUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ResourceUser");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.SearchHistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LatestUsedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SearchHistoryItem");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.UtilityToolsSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UtilityToolsSetting");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.BookCategoryRelation", b =>
                {
                    b.HasOne("UtilityTools.Data.Domain.Book", "Book")
                        .WithMany("BookCategoryRelations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UtilityTools.Data.Domain.BookCategory", "BookCategory")
                        .WithMany("BookCategoryRelations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("BookCategory");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.BookHistory", b =>
                {
                    b.HasOne("UtilityTools.Data.Domain.Book", "Book")
                        .WithMany("BookHistories")
                        .HasForeignKey("BookForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.BookMark", b =>
                {
                    b.HasOne("UtilityTools.Data.Domain.Book", "Book")
                        .WithMany("BookMarks")
                        .HasForeignKey("BookForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.PngImageCategoryRelation", b =>
                {
                    b.HasOne("UtilityTools.Data.Domain.PngCategory", "PngCategory")
                        .WithMany("PngImageLables")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UtilityTools.Data.Domain.PngImage", "PngImage")
                        .WithMany("PngImageLables")
                        .HasForeignKey("PngImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PngCategory");

                    b.Navigation("PngImage");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.Book", b =>
                {
                    b.Navigation("BookCategoryRelations");

                    b.Navigation("BookHistories");

                    b.Navigation("BookMarks");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.BookCategory", b =>
                {
                    b.Navigation("BookCategoryRelations");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.PngCategory", b =>
                {
                    b.Navigation("PngImageLables");
                });

            modelBuilder.Entity("UtilityTools.Data.Domain.PngImage", b =>
                {
                    b.Navigation("PngImageLables");
                });
#pragma warning restore 612, 618
        }
    }
}
