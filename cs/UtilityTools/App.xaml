<prism:PrismApplication x:Class="UtilityTools.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:UtilityTools" 
                        xmlns:control="clr-namespace:UtilityTools.Controls;assembly=UtilityTools.Controls"
             xmlns:commands="clr-namespace:UtilityTools.Commands"
             xmlns:converters="clr-namespace:UtilityTools.Controls.Converters;assembly=UtilityTools.Controls"
             xmlns:converter="clr-namespace:UtilityTools.Controls.Converters;assembly=UtilityTools.Controls"
             xmlns:prism="http://prismlibrary.com/" >
    <Application.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!--<ResourceDictionary Source="Resources\Window.xaml"/>-->
                <ResourceDictionary Source="/UtilityTools.Controls.Ribbon;component/UI/UtilityWindow.xaml" />
                <ResourceDictionary Source="Resources\Skins\TwilightBlue.xaml"/>
                <ResourceDictionary Source="Resources\Skins\DMSkin.xaml"/>
                <!--<ResourceDictionary Source="Resources\ListBox.xaml"/>-->
                <ResourceDictionary Source="Resources\OpenIconicIcons.xaml"/>
                <ResourceDictionary Source="Resources\AutoScrollListBoxDictionary.xaml"/>
                <ResourceDictionary Source="Resources\TabControlStyle.xaml"/>
                <ResourceDictionary Source="Resources\ToggleStyle.xaml"/>

                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.ComboBox.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.TextBox.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ListBox.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToggleButton.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Slider.xaml"/>

               
                

            </ResourceDictionary.MergedDictionaries>

            <!--<SolidColorBrush x:Key="MaterialDesignLightBackground" Color="#FFFAFAFA"/>
            <SolidColorBrush x:Key="MaterialDesignLightForeground" Color="#DD000000"/>
            <SolidColorBrush x:Key="MaterialDesignDarkBackground" Color="#FF303030"/>
            <SolidColorBrush x:Key="MaterialDesignDarkForeground" Color="#FFFAFAFA"/>
            <SolidColorBrush x:Key="MaterialDesignDarkSeparatorBackground" Color="#1F000000"/>
            <SolidColorBrush x:Key="MaterialDesignLightSeparatorBackground" Color="#1FFFFFFF"/>
            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MaterialDesignComboBox}"/>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}"/>-->

            <commands:DummyCommand x:Key="DummyCommand" />
            <converters:ImageConverter x:Key="ImageConverter"/>
            <Style x:Key="ItemContentStyle" TargetType="{x:Type ListViewItem}">



                <Style.Resources>
                    <LinearGradientBrush x:Key="ProfitBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0.1" Color="#AA00CC00" />
                        <GradientStop Offset="0.8" Color="#55008800" />
                    </LinearGradientBrush>
                    <LinearGradientBrush x:Key="LossBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0.1" Color="#00CC0000" />
                        <GradientStop Offset="0.8" Color="#55880000" />
                    </LinearGradientBrush>

                    <LinearGradientBrush x:Key="YellowBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0.1" Color="#FFF68F" />
                        <GradientStop Offset="0.8" Color="#55880000" />
                    </LinearGradientBrush>

                    <LinearGradientBrush x:Key="OkBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0.1" Color="#9F79EE"/>
                        <GradientStop Offset="0.8" Color="#55880000"/>
                    </LinearGradientBrush>

                    <LinearGradientBrush x:Key="PrepareBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0.1" Color="#3F9999"/>
                        <GradientStop Offset="0.8" Color="#A5880000"/>
                    </LinearGradientBrush>

                    <LinearGradientBrush x:Key="PreparedBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0.1" Color="#FA9999"/>
                        <GradientStop Offset="0.8" Color="#75880000"/>
                    </LinearGradientBrush>

                    <LinearGradientBrush x:Key="ViewedBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0.1" Color="#EEE999"/>
                        <GradientStop Offset="0.8" Color="#A5880000"/>
                    </LinearGradientBrush>

                    <converter:BackgroundConvert x:Key="bgConverter" />
                </Style.Resources>

                <Style.Triggers>
                    <!-- When a customer owes money, color them green. -->
                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="+1" >
                        <Setter Property="Background" Value="{StaticResource ProfitBrush}" />
                    </DataTrigger>

                    <!-- When a customer is owed money, color them red. -->
                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="-1" >
                        <Setter Property="Background" Value="{StaticResource LossBrush}" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="0" >
                        <Setter Property="Background" Value="{StaticResource YellowBrush}" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="2">
                        <Setter Property="Background" Value="{StaticResource OkBrush}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="3">
                        <Setter Property="Background" Value="{StaticResource PrepareBrush}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="4">
                        <Setter Property="Background" Value="{StaticResource PreparedBrush}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="5">
                        <Setter Property="Background" Value="{StaticResource ViewedBrush}"/>
                    </DataTrigger>

                    <!--https://social.msdn.microsoft.com/Forums/vstudio/en-US/a9e99b69-d82c-4e14-998e-2c961117b828/how-to-alternate-color-in-itemscontrol-without-touching-the-defaultglobal-datatemplate?forum=wpf-->
                    <!--<Trigger Property="ItemsControl.AlternationIndex" Value="0">
                        <Setter Property="Background" Value="Beige"></Setter>
                    </Trigger>
                    <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                        <Setter Property="Background" Value="White"></Setter>
                    </Trigger>-->
                    
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.1" Duration="0:0:.1" />
                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.1" Duration="0:0:.1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1.0" Duration="0:0:.1" />
                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1.0" Duration="0:0:.1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>

                <Style.Setters>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                    <Setter Property="Height" Value="35" />
                    <Setter Property="RenderTransformOrigin" Value="0.5,0.5" />
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <ScaleTransform />
                        </Setter.Value>
                    </Setter>


                </Style.Setters>
            </Style>


            <LinearGradientBrush x:Key="ProfitBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0.1" Color="#AA00CC00"/>
                <GradientStop Offset="0.8" Color="#55008800"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="LossBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0.1" Color="#FF3030"/>
                <GradientStop Offset="0.8" Color="#55880000"/>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="YellowBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0.1" Color="#EEEE00"/>
                <GradientStop Offset="0.8" Color="#55880000"/>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="OkBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0.1" Color="#9F79EE"/>
                <GradientStop Offset="0.8" Color="#55880000"/>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="PrepareBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0.1" Color="#3F9999"/>
                <GradientStop Offset="0.8" Color="#A5880000"/>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="PreparedBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0.1" Color="#FA9999"/>
                <GradientStop Offset="0.8" Color="#75880000"/>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="ViewedBrush" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0.1" Color="#EEE999"/>
                <GradientStop Offset="0.8" Color="#A5880000"/>
            </LinearGradientBrush>

            <Style TargetType="{x:Type ListBoxItem}" x:Key="ListBoxContainerStyle">
                <Style.Resources>
                    <converter:BackgroundConvert x:Key="bgConverter"/>
                </Style.Resources>
                <Style.Triggers>
                    <!-- When a customer owes money, color them green. -->
                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="+1">
                        <Setter Property="Background" Value="{StaticResource ProfitBrush}"/>
                    </DataTrigger>

                    <!-- When a customer is owed money, color them red. -->
                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="-1">
                        <Setter Property="Background" Value="{StaticResource LossBrush}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="0">
                        <Setter Property="Background" Value="{StaticResource YellowBrush}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="2">
                        <Setter Property="Background" Value="{StaticResource OkBrush}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="3">
                        <Setter Property="Background" Value="{StaticResource PrepareBrush}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="4">
                        <Setter Property="Background" Value="{StaticResource PreparedBrush}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding TaskStage, Converter={StaticResource bgConverter}}" Value="5">
                        <Setter Property="Background" Value="{StaticResource ViewedBrush}"/>
                    </DataTrigger>

                    <!--https://stackoverflow.com/questions/146269/change-wpf-datatemplate-for-listbox-item-if-selected-->
                    <!--<Trigger Property="IsSelected" Value="True">
                        <Setter Property="ContentTemplate" Value="{StaticResource SelectedTemplate}" />
                    </Trigger>-->


                  

                </Style.Triggers>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Margin" Value="10"/>
                <!--<Setter Property="ContentTemplate" Value="{StaticResource ItemTemplate}" />-->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border x:Name="Bd" control:MouseOverHelpers.MouseOverCommand="{Binding MouseOverCommand}"  Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2">
                                <ContentPresenter/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="true">
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="#A02B1A"/>
                                    <Setter Property="BorderThickness" TargetName="Bd" Value="5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style TargetType="{x:Type ListBoxItem}" x:Key="ListBoxAlternationStyle">
                <Style.Triggers>
                    <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                        <Setter Property="Background" Value="Transparent"></Setter>
                    </Trigger>
                    <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                        <Setter Property="Background" Value="Beige"></Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

        </ResourceDictionary>





    </Application.Resources>
</prism:PrismApplication>
